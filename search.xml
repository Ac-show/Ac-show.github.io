<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github部署vue、react项目和内网穿透</title>
    <url>/2019/12/04/GitHub%E9%83%A8%E7%BD%B2vue%E3%80%81react%E9%A1%B9%E7%9B%AE%E5%92%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p>记录一下怎么把项目在github服务器上运行起来<br>嘿嘿。。。又是一个白嫖服务器的小技巧！！</p>
<a id="more"></a>



<h2 id="1-创建Vue-React项目"><a href="#1-创建Vue-React项目" class="headerlink" title="1.创建Vue/React项目"></a>1.创建Vue/React项目</h2><h4 id="注意：因为需要将打包后的文件夹dist-build也上传到GitHub，所以需要修改一下gitignore文件"><a href="#注意：因为需要将打包后的文件夹dist-build也上传到GitHub，所以需要修改一下gitignore文件" class="headerlink" title="注意：因为需要将打包后的文件夹dist/build也上传到GitHub，所以需要修改一下gitignore文件"></a>注意：因为需要将打包后的文件夹dist/build也上传到GitHub，所以需要修改一下gitignore文件</h4><ul>
<li>Vue删除 /dist</li>
<li>React 删除 /build</li>
</ul>
<h2 id="2-GitHub创建一个空仓库"><a href="#2-GitHub创建一个空仓库" class="headerlink" title="2.GitHub创建一个空仓库"></a>2.GitHub创建一个空仓库</h2><p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/github%E9%83%A8%E7%BD%B2vue%E3%80%81react%E9%A1%B9%E7%9B%AE%E5%92%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/2.png" alt="QQ截图20201102164405"></p>
<h2 id="3-将项目上传到GitHub"><a href="#3-将项目上传到GitHub" class="headerlink" title="3.将项目上传到GitHub"></a>3.将项目上传到GitHub</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;first commit&#x27;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin GitHub仓库地址</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>



<h2 id="4-打包项目"><a href="#4-打包项目" class="headerlink" title="4.打包项目"></a>4.打包项目</h2><h4 id="注意：vue-react打包前需要修改配置文件，否则可能无法运行"><a href="#注意：vue-react打包前需要修改配置文件，否则可能无法运行" class="headerlink" title="注意：vue/react打包前需要修改配置文件，否则可能无法运行"></a>注意：vue/react打包前需要修改配置文件，否则可能无法运行</h4><h5 id="Vue-cli2："><a href="#Vue-cli2：" class="headerlink" title="Vue-cli2："></a>Vue-cli2：</h5><ul>
<li>找到config –&gt; index.js 文件，修改build</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">assetsPublicPath: <span class="string">&#x27;./&#x27;</span>  <span class="comment">// 前面加个点就行</span></span><br></pre></td></tr></table></figure>



<h5 id="Vue-cli3"><a href="#Vue-cli3" class="headerlink" title="Vue-cli3:"></a>Vue-cli3:</h5><ul>
<li>在项目目录下创建vue.config.js文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="React-cli"><a href="#React-cli" class="headerlink" title="React-cli:"></a>React-cli:</h5><ul>
<li>在package.json中加入</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;homepage&quot;:&quot;.&quot;</span><br></pre></td></tr></table></figure>



<h2 id="5-将打包后的项目上传到GitHub"><a href="#5-将打包后的项目上传到GitHub" class="headerlink" title="5.将打包后的项目上传到GitHub"></a>5.将打包后的项目上传到GitHub</h2><ul>
<li>执行下面代码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build // 打包项目</span><br><span class="line">git checkout -b gh-pages //创建并切换到gh-pages分支</span><br><span class="line">git add -f dist // 将dist文件夹提交到gh-pages分支</span><br><span class="line">git commit -m &#x27;create project&#x27; </span><br><span class="line"> // 将dist文件夹提交到github上</span><br><span class="line">git subtree push --prefix dist origin gh-pages</span><br></pre></td></tr></table></figure>



<ul>
<li>当项目更新后：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 先上传main分支</span><br><span class="line">git add . </span><br><span class="line">git commit -m &#x27;****&#x27;</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">// 再上传dist文件夹到gh-page分支</span><br><span class="line">git checkout gh-page</span><br><span class="line">git merge main  // 合并main分支内容</span><br><span class="line">npm run build   // 打包gh-page分支下的项目</span><br><span class="line">git add -f dist</span><br><span class="line">git commit -m &#x27;****&#x27;</span><br><span class="line">git subtree push --prefix dist origin gh-pages</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h2 id="6-开启GitHub-Page"><a href="#6-开启GitHub-Page" class="headerlink" title="6.开启GitHub Page"></a>6.开启GitHub Page</h2><p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/github%E9%83%A8%E7%BD%B2vue%E3%80%81react%E9%A1%B9%E7%9B%AE%E5%92%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/6.png" alt="QQ截图20201102165732"></p>
<h2 id="7-内网穿透"><a href="#7-内网穿透" class="headerlink" title="7.内网穿透"></a>7.内网穿透</h2><h4 id="如果想要不在同一个局域网下的电脑访问到本机资源可以尝试内网穿透"><a href="#如果想要不在同一个局域网下的电脑访问到本机资源可以尝试内网穿透" class="headerlink" title="如果想要不在同一个局域网下的电脑访问到本机资源可以尝试内网穿透"></a>如果想要不在同一个局域网下的电脑访问到本机资源可以尝试内网穿透</h4><p>市面上有很多内网穿透的软件，这里我介绍一下我使用的<strong>网云穿</strong></p>
<ul>
<li>下载app     <a href="http://xiaomy.net/">http://xiaomy.net/</a> (下载客户端)</li>
<li>注册账号</li>
<li>点击<strong>开通隧道</strong> （有一个永久免费的，点击领取）</li>
<li>编辑隧道</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/github%E9%83%A8%E7%BD%B2vue%E3%80%81react%E9%A1%B9%E7%9B%AE%E5%92%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/7.1.png" alt="QQ截图20201102170818"></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/github%E9%83%A8%E7%BD%B2vue%E3%80%81react%E9%A1%B9%E7%9B%AE%E5%92%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/7.2.png" alt="QQ截图20201102170838"></p>
<ul>
<li>开启客户端</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/github%E9%83%A8%E7%BD%B2vue%E3%80%81react%E9%A1%B9%E7%9B%AE%E5%92%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/7.3.png" alt="QQ截图20201102171107"></p>
<ul>
<li>点击启动</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue/React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router使用（简洁版）</title>
    <url>/2020/05/16/Vue%20Router%E4%BD%BF%E7%94%A8%EF%BC%88%E7%AE%80%E6%B4%81%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<p>都是一些常用的router</p>
<a id="more"></a>



<h2 id="Vue-Router使用（简洁版）"><a href="#Vue-Router使用（简洁版）" class="headerlink" title="Vue Router使用（简洁版）"></a>Vue Router使用（简洁版）</h2><h3 id="router原理"><a href="#router原理" class="headerlink" title="router原理"></a>router原理</h3><h4 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h4><p>HashHistory.push()</p>
<p>HashHistory.replace()</p>
<p>主要监听hashchange事件来监听url的改变</p>
<h4 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h4><p>pushState()</p>
<p>replaceState()</p>
<h3 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;路径（或者使用&#123;name&#125;）&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="路由常用方式："><a href="#路由常用方式：" class="headerlink" title="路由常用方式："></a>路由常用方式：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.push() <span class="comment">// 跳转路由，可以前进后退</span></span><br><span class="line">router.replace() <span class="comment">// 跳转路由，无法前进后退</span></span><br><span class="line">router.go() <span class="comment">// 前进后退</span></span><br></pre></td></tr></table></figure>



<h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><ul>
<li>动态路由</li>
<li>params</li>
<li>query（会将参数以?id=id&amp;name=name的形式显示在url上）</li>
</ul>
<h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><p>在组件里面加个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在该route对象中加个children属性</p>
<h3 id="route属性"><a href="#route属性" class="headerlink" title="route属性"></a>route属性</h3><ul>
<li><p>path：路由路径</p>
</li>
<li><p>name：路由名称</p>
</li>
<li><p>redirect：重定向（值为路由路径或名称对象）</p>
</li>
<li><p>children：子路由配置</p>
</li>
<li><p>component：路由匹配组件</p>
</li>
<li><p>components：同时展示多个组件</p>
<ul>
<li><pre><code class="html">&lt;router-view&gt;&lt;/router-view&gt;
&lt;router-view name=&quot;a&quot;&gt;&lt;/router-view&gt;
&lt;router-view name=&quot;b&quot;&gt;&lt;/router-view&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  components: &#123;</span><br><span class="line">      default: 默认组件,</span><br><span class="line">      a: 组件A,</span><br><span class="line">      b: 组件B</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>props：将组件和路由解耦（不太懂）</p>
</li>
<li><p>meta：配置一些路由元信息，可以通过route.matched.meta访问（就是用来存放一些你想附带的信息）</p>
</li>
</ul>
<h3 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h3><p>使用history只需要在router中加入mode属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mode: history</span><br></pre></td></tr></table></figure>

<p>但是后端需要一些配置：（不太会）</p>
<h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><ul>
<li><p>路由跳转前</p>
<ul>
<li><pre><code class="js">beforeEach((to, from, next) =&gt; &#123;&#125;) //router全局钩子
beforeEnter((to, from, next) =&gt; &#123;&#125;) // 路由独享钩子，在跳转到某个组件前触发，定义在route中
beforeRouteEnter((to, from, next) =&gt; &#123;&#125;) //类似beforeEnter,组件还没创建前就会执行，所以无法调用this实例
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 路由跳转后</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;js</span><br><span class="line">    afterEach((to, from) &#x3D;&gt; &#123;&#125;) &#x2F;&#x2F;router全局钩子</span><br><span class="line">    beforeRouteUpdate((to, from, next) &#x3D;&gt; &#123;&#125;) &#x2F;&#x2F;当前路由被改变但是组件还是被复用时调用，比如动态路由改变后面的参数</span><br><span class="line">    beforeRouteLeave((to, from, next) &#x3D;&gt; &#123;&#125;) &#x2F;&#x2F; 路由离开该组件前调用</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>路由导航触发顺序：</p>
<ul>
<li>离开的组件调用beforeRouteLeave</li>
<li>全局调用beforeEach</li>
<li>如果组件重用了就调用beforeRouteUpdate</li>
<li>路由配置中调用beforeEnter</li>
<li>进入的组件中调用beforeRouteEnter</li>
<li>调用全局的beforeResolve</li>
<li>调用afterEach</li>
<li>DOM更新</li>
</ul>
</li>
</ul>
<h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><p><strong>router-view外面包一层transition</strong></p>
<h3 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h3><p><strong>注意：只能在history模式下使用</strong></p>
<p>在router中加入一个函数属性就行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savePosition</span>)</span> &#123;</span><br><span class="line">    retuan &#123;x, y&#125; <span class="comment">//返回滚到的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>Vue路由懒加载很简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>) <span class="comment">// 这样引入组件就行了</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue/React</tag>
      </tags>
  </entry>
  <entry>
    <title>H5新属性---draggable</title>
    <url>/2019/11/15/drag/</url>
    <content><![CDATA[<p>上次做项目有拖动排序的功能，用得实在太少，记录一下</p>
<a id="more"></a>




<h2 id="H5—draggable"><a href="#H5—draggable" class="headerlink" title="H5—draggable"></a>H5—draggable</h2><h4 id="1-draggable-可拖放属性"><a href="#1-draggable-可拖放属性" class="headerlink" title="1.draggable 可拖放属性"></a>1.draggable 可拖放属性</h4><p>默认情况下，图像、链接是可以拖动的，但是文本不行，文本是无法拖动的。</p>
<p>文本如果有拖动的需求的话可以在父标签上添加<strong>draggable</strong>属性，默认情况下除图像、链接，标签的属性<strong>draggable=“false”</strong>，把他改为<strong>true</strong>就可以拖动了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认情况下可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> &gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 设置为不可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认情况下不可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置为可以拖动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>支持draggable属性的浏览器有IE10+，Firfox4+，Safari5+，Chrome，另外为了让Firfox支持可拖放属性，还必须添加一个ondragstart事件处理程序，并在dataTransfer对象中保存一些信息。</p>
<h4 id="2-拖动有关的事件"><a href="#2-拖动有关的事件" class="headerlink" title="2.拖动有关的事件"></a>2.拖动有关的事件</h4><ul>
<li>以下事件只能当**draggable=”true”**时才能触发（被拖元素触发）<ul>
<li>dragstart: 鼠标按下开始拖动</li>
<li>drag: 拖动过程中触发</li>
<li>dragend: 拖动结束时触发</li>
</ul>
</li>
<li>以下事件是任何元素都可触发（鼠标经过元素触发）<ul>
<li>dragenter: 鼠标进行拖动时，拖进某个元素时触发该元素的dragenter事件</li>
<li>dragover: 鼠标进行拖动时，在某个元素中拖动时触发该元素的dragover事件</li>
<li>dragleave: 鼠标进行拖动时，拖出某个元素时触发该元素的dragleave事件</li>
<li>drop: 鼠标进行拖动时，在某个元素中松开鼠标时触发该元素的drop事件(drop事件必须要在<strong>dragover</strong>事件中设置**e.preventDefault()**才能触发)</li>
</ul>
</li>
</ul>
<h4 id="3-事件内置对象dataTransfer"><a href="#3-事件内置对象dataTransfer" class="headerlink" title="3.事件内置对象dataTransfer"></a>3.事件内置对象dataTransfer</h4><ul>
<li><p>dataTransfer主要有两个方法：<strong>setData()</strong> 和 <strong>getData()</strong></p>
<ul>
<li>setData(type, text): 该方法一共有两个参数，<strong>type</strong>是数据类型 ,<strong>text</strong>是保存的文本,该方法可用于保存数据，在dragend事件后销毁被保存的数据，相当于一个临时变量</li>
<li>getData(type): 该方法用于取出setData保存的数据</li>
</ul>
</li>
</ul>
<ul>
<li><p>dataTransfer主要有两个属性：<strong>dropEffect **和 **effectAllowed</strong>来确定被拖动的元素和放置被拖动元素的位置能够接收什么操作，这两个属性要互相搭配才有用</p>
<ul>
<li><p>dropEffect总共有4个可能的值：<strong>none、move、copy、link</strong></p>
</li>
<li><p>effectAllowed总共有9个可能的值：</p>
<ul>
<li>uninitialized：没有给被拖动元素设置任何放置行为</li>
<li>none：被拖动的元素不能有任何行为</li>
<li>copy：只允许值为”copy”的dropEffect</li>
<li>move：只允许值为”move”的dropEffect</li>
<li>link：只允许值为”link”的dropEffect</li>
<li>copyLink：只允许值为”copy”和”link”的dropEffect</li>
<li>copyMove：只允许值为”copy”和”move”的dropEffect</li>
<li>linkMove：只允许值为”link”和”move”的dropEffect</li>
<li>all：允许任意dropEffect</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>注意：必须在dragstart事件处理程序中设置effectAllowed属，必须在dragover事件处理程序中设置dropEffect属性</strong></p>
<p><strong>effectAllowed是给被拖动元素设置的，dropEffect是给鼠标经过元素设置的，只有当两属性值相同是，被拖元素才能放到鼠标经过的元素的位置</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub + Hexo 搭建博客</title>
    <url>/2019/10/06/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这是我一边搭建一边写的，按照步骤来应该没什么问题</p>
<a id="more"></a>



<h2 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h2><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p><strong>去官网下载安装就行</strong></p>
<h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><p><strong>去官网下载安装</strong></p>
<h4 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g // 现在npm和node都是绑定安装</span><br></pre></td></tr></table></figure>



<h2 id="2-本地安装Hexo"><a href="#2-本地安装Hexo" class="headerlink" title="2.本地安装Hexo"></a>2.本地安装Hexo</h2><h4 id="2-1搭建hexo"><a href="#2-1搭建hexo" class="headerlink" title="2.1搭建hexo"></a>2.1搭建hexo</h4><p><strong>找一个目录新建一个文件夹用于存放你的blog项目</strong></p>
<p><strong>打开控制台，cd到你的文件夹下</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.1.png"></p>
<h4 id="2-2初始化项目"><a href="#2-2初始化项目" class="headerlink" title="2.2初始化项目"></a>2.2初始化项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><strong>初始化项目后通过一下命令就可以在本地访问了</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s </span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.2.png" alt="QQ截图20201107141639"></p>
<h2 id="3-创建GitHub仓库"><a href="#3-创建GitHub仓库" class="headerlink" title="3.创建GitHub仓库"></a>3.创建GitHub仓库</h2><p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/3.1.png" alt="QQ截图20201107141422"></p>
<h2 id="4-将GitHub仓库与hexo项目连接起来"><a href="#4-将GitHub仓库与hexo项目连接起来" class="headerlink" title="4.将GitHub仓库与hexo项目连接起来"></a>4.将GitHub仓库与hexo项目连接起来</h2><h4 id="4-1-生成ssh密钥"><a href="#4-1-生成ssh密钥" class="headerlink" title="4.1 生成ssh密钥"></a>4.1 生成ssh密钥</h4><p><strong>打开控制台输入</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;github绑定的email&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.1.1.png" alt="QQ截图20201107142153"></p>
<p><strong>生成ssh成功后</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.1.2.png" alt="QQ截图20201107152555"></p>
<h4 id="4-2-设置GitHub"><a href="#4-2-设置GitHub" class="headerlink" title="4.2 设置GitHub"></a>4.2 设置GitHub</h4><p><strong>打开GitHub个人设置</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.2.1.png" alt="QQ截图20201107142902"></p>
<p><strong>测试连接GitHub</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.2.2.png" alt="QQ截图20201107142648"></p>
<h4 id="4-3-配置本地hexo项目下的-config-yml"><a href="#4-3-配置本地hexo项目下的-config-yml" class="headerlink" title="4.3 配置本地hexo项目下的_config.yml"></a>4.3 配置本地hexo项目下的_config.yml</h4><p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.3.png" alt="QQ截图20201107143151"></p>
<h4 id="4-4-博客发布到GitHub仓库"><a href="#4-4-博客发布到GitHub仓库" class="headerlink" title="4.4 博客发布到GitHub仓库"></a>4.4 博客发布到GitHub仓库</h4><p><strong>安装依赖</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.4.png" alt="QQ截图20201107143638"></p>
<p><strong>上传GitHub</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure>

<p>现在可以直接访问了：<strong>GitHub用户名.github.io</strong></p>
<p><strong>注意：可能有缓存，要等一会</strong></p>
<h2 id="5-配置域名"><a href="#5-配置域名" class="headerlink" title="5.配置域名"></a>5.配置域名</h2><p><strong>先买一个域名，要不然还是用GitHub分配给你的域名把</strong></p>
<p><strong>先ping一下GitHub给你的域名</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.1.png" alt="QQ截图20201107144754"></p>
<p><strong>复制ip</strong></p>
<p><strong>解析域名</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.2.png" alt="QQ截图20201107145123"></p>
<p><strong>添加记录</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.3.png" alt="QQ截图20201107145436"></p>
<p><strong>创建CNAME文件</strong></p>
<p><strong>进入你博客目录下的source文件夹，新建一个CNAME文件，将你的域名写进去，CNAME没有后缀名！！</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.4.png" alt="QQ截图20201107145718"></p>
<p><strong>重新上传 hexo d</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.5.png" alt="QQ截图20201107145859"></p>
<p>现在用你自己的域名应该是上面这张图片的样子</p>
<p><strong>进入你GitHub仓库的setting下设置一下就好了</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.6.png" alt="QQ截图20201107150031"></p>
<p><strong>现在应该可以直接访问了</strong></p>
<p><img src="https://raw.githubusercontent.com/Ac-show/blog-images/main/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.7.png" alt="QQ截图20201107150046"></p>
]]></content>
      <categories>
        <category>B技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>FLEX布局(弹性布局)</title>
    <url>/2019/10/08/flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>flex布局，有了这个还需要float干嘛？？？</p>
<a id="more"></a>


<h1 id="FLEX布局-弹性布局"><a href="#FLEX布局-弹性布局" class="headerlink" title="FLEX布局(弹性布局)"></a>FLEX布局(弹性布局)</h1><ul>
<li><p>flixible Box</p>
</li>
<li><p>flex容器：使用display:flex就是flex容器</p>
</li>
<li><p>项目：flex容器中的子元素就是项目，不包括孙子元素</p>
</li>
<li><p>默认主轴方向排列，即横向</p>
</li>
</ul>
<h2 id="Flex-容器的属性"><a href="#Flex-容器的属性" class="headerlink" title="Flex-容器的属性"></a>Flex-容器的属性</h2><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><ul>
<li>作用：指定flex属性</li>
<li>取值：flex | inline-flex</li>
<li>flex：将对象作为弹性伸缩盒展示，相当于块级属性，有默认宽度100%</li>
<li>inline-flex：将对象作为内联块级弹性伸缩盒展示，即行级元素，没有默认宽度</li>
</ul>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><ul>
<li>作用：指定容器的主轴方向，主轴默认为水平向右方向，项目排列的方向</li>
<li>取值：row | row-reverse | column | column-reverse</li>
<li>row：默认值，主轴横向往右排列</li>
<li>row-reverse：主轴横向往左反向排列</li>
<li>column：垂直方向排列</li>
<li>column-reverse：垂直方向反向排列</li>
</ul>
<h3 id="justify-content属性（justify单词的意思是两端对齐）"><a href="#justify-content属性（justify单词的意思是两端对齐）" class="headerlink" title="justify-content属性（justify单词的意思是两端对齐）"></a>justify-content属性（justify单词的意思是两端对齐）</h3><ul>
<li>作用：属性定义了项目在主轴上的对齐方式</li>
<li>取值：flex-start | flex-end | center | space-between | space-around</li>
<li>flex-start：默认的是从主轴开始位置对齐</li>
<li>flex-end：默认的是从主轴结束位置对齐</li>
<li>center：居中对齐，项目形成的总宽度不变</li>
<li>space-between：两端对齐，中间间隔宽度一样</li>
<li>space-around：所有项目的两侧间隔相等，主轴两端会留边</li>
<li>space-evenly：等分空余空间给每个元素</li>
</ul>
<h3 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h3><ul>
<li>作用：定义元素交叉轴上的对齐方式</li>
<li>取值：flex-start | flex-end | center | baseline | stretch</li>
<li>flex-start：交叉轴的开始位置对齐</li>
<li>flex-end：交叉轴的结束位置堆砌</li>
<li>center：交叉轴居中</li>
<li>baseline：基线对齐，文字第一行对齐</li>
<li>stretch：（单词意思是弹性、拉伸）默认值！！如果项目未设置高度或者设置为auto，将沾满整个容器的高度（自动填充）</li>
</ul>
<p>如果flex-item没有设置高度，那么flex-item的高度不像以前那样他的高度由内容决定，而是他的高度会拉伸和父元素一样。</p>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><ul>
<li>作用：描述如果一个轴线排列不下，如何换行</li>
<li>取值：nowrap | wrap | wrap-reverse</li>
<li>nowrap：默认不换行，会压缩子元素</li>
<li>wrap：换行，第一行在上方</li>
<li>wrap-reverse：换行，第一行在下方</li>
</ul>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><ul>
<li>作用：是flex-direction和flex-wrap和合并缩写形式</li>
<li>取值：flex-direction || flex-wrap</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">	// 下方写法一和写法二效果一样：</span><br><span class="line">// 写法一</span><br><span class="line">   <span class="selector-class">.box</span> &#123;</span><br><span class="line">   	<span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 写法二</span><br><span class="line">   <span class="selector-class">.box</span> &#123;</span><br><span class="line">   	<span class="attribute">flex-direction</span>: row;</span><br><span class="line">       <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><ul>
<li>作用：定义了交叉轴线上的对齐方式</li>
<li>说明：如果项目只有一个轴线（一行），该属性不起作用，如果wrap换行了，那么才有作用</li>
<li>取值：flex-start | flex-end | center | space-between | space-around | stretch</li>
<li>flex-start：所有轴线都是从头开始，交叉轴开始位置开始，主轴横轴的话，就是上对齐</li>
<li>flex-end：从尾开始，交叉轴结束位置开始</li>
<li>center：所有从中间开始</li>
<li>space-between：多条轴线上下两端对齐</li>
<li>space-around：多条轴线上下两端分散对齐，上下两侧留白</li>
<li>space-evenly：等分空余空间给每个元素</li>
<li>stretch：默认!高度自动填充拉伸</li>
</ul>
<p>这里参考justify-content 看看吧，只不过把主轴换成了交叉轴</p>
<h2 id="Flex-项目的属性"><a href="#Flex-项目的属性" class="headerlink" title="Flex-项目的属性"></a>Flex-项目的属性</h2><ul>
<li>项目的属性规定的是项目在flex容器中的属性</li>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul>
<li>作用：定义项目的排列顺序</li>
<li>取值：integer</li>
</ul>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><ul>
<li>作用：允许项目有和其他项目不一样的对齐方式，可以覆盖父元素的align-items属性</li>
<li>取值：和align-items多了个auto</li>
<li>默认值为auto，表示继承align-items属性</li>
</ul>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><ul>
<li>作用：定义项目的放大比例，默认是0，即如果存在剩余空间，也不放大。</li>
<li>取值：&gt; 0</li>
<li>默认值为0，默认不会自动放大</li>
<li>如果都设置为1，那么所有项目会平分剩余的空间</li>
<li>如果有三个元素，一个设置为2，剩余为1，那么项目2的就会占一半，剩下两个会各占四分之一。</li>
<li>如果有三个元素，一个width设置为200，剩余都为1，那么剩余的会平分固定宽度200之外的空间</li>
<li>最终尺寸不得大于max-width和max-height</li>
</ul>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><ul>
<li>作用：定义项目的缩放比例，和grow相反</li>
<li>取值：&gt;0</li>
<li>默认值为1，默认会自动缩小</li>
<li>如果所有项目都为1，当空间不足时候，都会等比例缩小</li>
<li>如果有一个项目为0，其他都为1，当空间不足时候，0不变，1都缩小</li>
<li>最终尺寸不得小于min-width和min-height</li>
</ul>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><ul>
<li>用来设置flex items在主轴方向上的base size</li>
<li>auto 默认值、具体的宽度数值</li>
<li>决定flex items最终base size的因素、优先级从高到低</li>
<li>max-width|max-height|min-width|min-height</li>
<li>flex-basis</li>
<li>width|height</li>
<li>内容本身的size</li>
</ul>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul>
<li>作用：flex-grow、flex-shrink、flex-basis的简写</li>
<li>默认值：0 1 auto；</li>
</ul>
<p>单值语法：值必须为以下其中之一：</p>
<p>​    1、一个无单位数：他会被当做<code>flex-grow</code>的值。</p>
<p>​    2、一个有效的宽度值:他会被当做flex-basis的值。</p>
<p>​    3、关键字none,auto或initial。</p>
<p>双值语法：第一个值必须为无单位数，并且它会被当做<code>flex-grow</code>的值</p>
<p>​        第二个值必须为以下之一：</p>
<p>​        1、一个无单位数：它会被当做flex-shrink的值。</p>
<p>​        2、一个有效的宽度值：它会被当做flex-basis的值。</p>
<p>三值语法：</p>
<p>​    第一个值必须为一个无单位数，并且它会被当作<code>flex-grow</code>的值。</p>
<p>​    第二个值必须为一个无单位数，并且它会被当作<code>flex-shrink</code>的值。</p>
<p>​    第三个值必须为一个有效的宽度值，并且它会被当作<code>flex-basis</code>的值。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器缓存</title>
    <url>/2020/11/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>记一下浏览器缓存</p>
<a id="more"></a>




<h3 id="为什么有浏览器缓存"><a href="#为什么有浏览器缓存" class="headerlink" title="为什么有浏览器缓存"></a>为什么有浏览器缓存</h3><p>浏览器第一次向服务器发起请求后拿到请求的结果，根据响应报文中的HTTP头的缓存标识决定是否缓存，是的话就将请求结果和缓存标识存入浏览器缓存</p>
<p>注意：</p>
<ul>
<li>浏览器每次发起请求都会现在浏览器缓存中查找该请求结果和缓存标识</li>
<li>浏览器每次拿到请求结果都会将结果和缓存标识存入浏览器缓存中</li>
</ul>
<h3 id="强制缓存："><a href="#强制缓存：" class="headerlink" title="强制缓存："></a>强制缓存：</h3><p>强制缓存就是使用浏览器缓存查找该请求的结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程：</p>
<ul>
<li>没有该请求缓存和标识，强制缓存失效，直接向浏览器发送请求</li>
<li>该请求缓存失效，强制缓存失效，携带标识向服务器发起Http请求，使用协商缓存</li>
<li>存在该请求缓存结果，且未失效，使用强制缓存</li>
</ul>
<p>强制缓存主要使用两个属性Cache-Control和Expires</p>
<p><strong>Cache-Control：</strong></p>
<p>private：所有内容只有客户端可以缓存（默认值）</p>
<p>public：所有内容都将被缓存</p>
<p>no-cache：客户端缓存内容，但是否使用缓存需要协商缓存验证来决定（就是优先使用协商缓存）</p>
<p>no-store：所有内容都不会被缓存</p>
<p>max-age = XXX：设置缓存保存时间</p>
<p><strong>from memory cache：使用内存缓存</strong></p>
<p>快速读取、有时效（一旦进程关闭，进程的内存则会清空）</p>
<p><strong>from disk cache：使用硬盘缓存</strong></p>
<h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>协商缓存就是强制缓存失效后，浏览器携带请求标识向服务器发起请求，服务器根据缓存标识决定是否使用缓存的过程：</p>
<ul>
<li>缓存中的请求结果失效，浏览器携带标识发起请求，资源无更新，浏览器再次使用缓存中的请求结果（304）</li>
<li>缓存中的请求结果失效，浏览器携带标识发起请求，资源更新，使用该结果并将其存入浏览器缓存（200）</li>
</ul>
<p>协商缓存的字段：</p>
<p><strong>Last-Modified：</strong>返回该资源在服务器最后的修改的时间</p>
<p><strong>If-Modified-Since：</strong>客户端发起请求时将上次服务器响应返回的<strong>Last-Modified</strong>用<strong>If-Modified-Since</strong>携带发送过去与服务器的<strong>Last-Modified</strong>进行比较，如果<strong>Last-Modified</strong> &gt; <strong>If-Modified-Since</strong>则代表资源已更新（200），相反表示资源未更新（304）</p>
<p><strong>Etag</strong>和<strong>If-None-Match</strong></p>
<p>跟<strong>Last-Modified</strong>和 <strong>If-Modified-Since</strong>一样，一个时比时间，一个是比标识</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝的实现</title>
    <url>/2020/06/17/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>深拷贝的实现，有空更新一下</p>
<a id="more"></a>


<h3 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h3><p>拷贝分为深拷贝与浅拷贝，比如：a拷贝了b对象，当修改a的时候，b也发生了改变，那么就是浅拷贝了，如果a不管怎么改，都和b无关，那就是深拷贝。<strong>浅拷贝只是复制了一下引用路径，其实拷贝前后变量在内存中都是一个位置，只是把路径拷贝了，深拷贝相当于在内存中另外开辟一块空间用于存放拷贝的东西</strong></p>
<h4 id="拷贝方法："><a href="#拷贝方法：" class="headerlink" title="拷贝方法："></a>拷贝方法：</h4><h5 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...arr] <span class="comment">//扩展运算符</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice <span class="comment">// let newArr = arr.slice()</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.concat() <span class="comment">//let newArr = arr.concat()</span></span><br><span class="line"><span class="built_in">Array</span>.from <span class="comment">// let newArr = Array.from(arr)</span></span><br></pre></td></tr></table></figure>

<h5 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;...obj&#125; <span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="built_in">Object</span>.assign <span class="comment">//let newObj = Object.assign(&#123;&#125;, obj)</span></span><br></pre></td></tr></table></figure>



<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>我们常用的拷贝一般都是使用<strong>JSON.stringify</strong>和<strong>JSON.parse</strong>，但是这对于普通的对象和数组还行，但对于一些特定的情况下是行不通的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通情况</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;xiaoming&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)) <span class="comment">// 拷贝成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象中存在函数</span></span><br><span class="line">obj.foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)) <span class="comment">// 函数被忽略了，打印newObj为&#123; name: &#x27;xiaoming&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环引用</span></span><br><span class="line">obj.a = obj</span><br><span class="line">newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)) <span class="comment">// 直接报错（循环引用是无法转化成字符串的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存在正则</span></span><br><span class="line">obj.regexp = <span class="regexp">/\aaa$/</span></span><br><span class="line">newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)) <span class="comment">// 会将正则转化成一个空对象</span></span><br></pre></td></tr></table></figure>



<h4 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般拷贝都是直接递归调用</span></span><br><span class="line"><span class="comment">// 如果是基本数据类型的化，直接返回就好</span></span><br><span class="line"><span class="comment">// 如果是引用类型，先创建一个空对象，遍历需要克隆的对象，将对象依次拷贝到空对象然后返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">            newObj[i] = clone(obj[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们可以将对象的key和value存放入一个Map对象，每次拷贝前都查看map中是否有这个对象</span></span><br><span class="line"><span class="comment">// 如果有，我们就直接从Map中拿</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">        <span class="comment">// 如果在map存在obj，那说明存在循环引用，直接从map中拿出，然后返回就行</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">map.has(obj)</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(obj)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把每一项都存入map中</span></span><br><span class="line">        map.set(obj, newObj)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">            newObj[i] = clone(obj[i], map)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newObj</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>这里我只写了对象的深拷贝，其他的等有时间在弄吧</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖和节流以及函数柯里化</title>
    <url>/2020/01/02/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E4%BB%A5%E5%8F%8A%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
    <content><![CDATA[<p>写两个最基本的防抖和节流，以后找的时候方便</p>
<a id="more"></a>

<h3 id="防抖（Debouncing）"><a href="#防抖（Debouncing）" class="headerlink" title="防抖（Debouncing）"></a>防抖（Debouncing）</h3><p>防抖：阻止事件连续触发，在规定时间内多次触发事件只执行最后一次，中间触发的事件都不会执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fun, timer</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> timerOut;</span><br><span class="line">	<span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">clearTimeout</span>(timerOut)</span><br><span class="line">		timerOut = <span class="built_in">setTimeout</span>(fun, timer)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="节流（Throttle）"><a href="#节流（Throttle）" class="headerlink" title="节流（Throttle）"></a>节流（Throttle）</h3><p>节流：在规定时间内只执行一次，比如规定一秒内执行一次，那么一秒内多次触发也只会执行一次，不过执行的是第一次，后面的都取消了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fun, timer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isRunning = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isRunning) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        isRunning = <span class="literal">true</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fun()</span><br><span class="line">            isRunning = <span class="literal">false</span></span><br><span class="line">        &#125;, timer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>防抖和节流的原理都是使用定时器来执行函数，先给函数设置一个先行条件，如果不满足先行条件，那么定时器会在就绪前就被清除</strong></p>
<h3 id="柯里化（currying）"><a href="#柯里化（currying）" class="headerlink" title="柯里化（currying）"></a>柯里化（currying）</h3><p>柯里化：网上看见好像面试可能会问，先记录下来，为以后做准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sum() &#123;</span><br><span class="line">	let arr &#x3D; [];</span><br><span class="line">    arr.push(...arguments); &#x2F;&#x2F; 接收第一个括号的参数</span><br><span class="line">    function next() &#123;</span><br><span class="line">    	arr.push(...arguments); </span><br><span class="line">    	return next; &#x2F;&#x2F; 循环接收后面所有括号传过来的参数</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 重写next原型上的toString()方法</span><br><span class="line">    next.toString &#x3D; function () &#123;</span><br><span class="line">    	return arr.reduce(function (a, b) &#123;</span><br><span class="line">    		return a + b;</span><br><span class="line">    	&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">	return next; &#x2F;&#x2F; 返回next函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(1)(2， 2)(3)()(1) &#x2F;&#x2F; 9</span><br><span class="line">console.log(typeof sum(1)(1)(2)(5)) &#x2F;&#x2F; function</span><br></pre></td></tr></table></figure>



<p><strong>柯里化的的实现是利用了函数原型链上的toString()方法，他会在函数需要表达成字符穿时使用：比如</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">a + <span class="string">&#x27;&#x27;</span> <span class="comment">// function a() &#123;&#125;</span></span><br><span class="line"><span class="comment">// 上面 a + &#x27;&#x27; 其实是a函数先调用了a.toString()</span></span><br><span class="line"><span class="comment">// 所以上面的式子可以理解为 a.toString() + &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>所以柯里化的主要底层逻辑就是函数原型的重写</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>WEB性能优化</tag>
      </tags>
  </entry>
</search>
